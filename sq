#!/usr/bin/env python
import click
import re

from libsq.utils import (
    _docker_exec,
    _ensure_docker,
    _ensure_host,
    # _env_vars,
    _run_command,
    # TF_CONTAINER,
)

HOST_MAC_IP = "host.docker.internal"


@click.group(help="Studio Quixote cli commands.")
def cli():
    pass


@cli.group(help="Local (mac host) commands.")
def dev():
    pass


@cli.group(help="ffmpeg commands.")
def ffmpeg():
    pass


@cli.group(help="Commands to be run inside the docker host only.")
def docker():
    pass


@cli.group(help="Terraform commands.")
def tf():
    pass


@cli.group(help="pg commands.")
def pg():
    pass


def _is_mp4(ctx, param, value):
    if not re.match(r"\.mp4$", value):
        raise click.BadParameter("Output file must be .mp4")


@docker.command(help="pg_dump the Mac DaVinci db.")
@click.argument("dbname", type=click.STRING, required=True)
def pg_dump(dbname):
    _ensure_docker()
    cmd = (
        ' PGPASSWORD="$MAC_PG_PASS"'
        " pg_dump"
        f" -h {HOST_MAC_IP}"
        "  -U $MAC_PG_USER"
        f" -d {dbname}"
        f" > {dbname}.dump.sql"
    )
    _run_command(cmd, False)


@pg.command(help="pg_dump the Mac DaVinci db.")
@click.argument("dbname", type=click.STRING, required=True)
def dump(dbname):
    _docker_exec("./sq docker pg-dump {0}".format(dbname), True)


@dev.command(help="Start bash in docker container, inheriting SQ__ prefixed env vars.")
@click.option("--no-inherit-env", is_flag=True, help="Do NOT inherit SQ__ env vars.")
def bash(no_inherit_env):
    _docker_exec("bash", not no_inherit_env)


@dev.command(help="Start bash in docker container, inheriting SQ__ prefixed env vars.")
@click.argument("lines", type=int, required=False)
def tail_davinci(lines):
    _ensure_host()
    cmd = "tail -f"
    if lines:
        cmd = f"{cmd} -n {lines} "
    cmd = f'{cmd} "/Library/Application Support/Blackmagic Design/DaVinci Resolve/logs/davinci_resolve.log" '
    _run_command(cmd)


@docker.command(help="Run tf plan in docker.")
@click.argument("targets", type=click.STRING, required=False)
def tf_plan(targets):
    _ensure_docker()
    plan_args = []
    if targets:
        targets = targets.split(" ")
        for target in targets:
            plan_args.append(f"-target={target}")
    plan_args = " ".join(plan_args)
    cmd = f"cd tf && terraform plan -out=plan.tfplan {plan_args} . | landscape"
    _run_command(cmd)


@tf.command(help="Run tf plan in docker.")
@click.option("--no-inherit-env", is_flag=True, help="Do NOT inherit SQ__ env vars.")
@click.argument("targets", type=click.STRING, required=False)
def plan(no_inherit_env, targets=""):
    _docker_exec("./sq docker tf-plan {0}".format(targets or ""), not no_inherit_env)


@ffmpeg.command(help="Convert to mp4 for import to DaVinci Resolve.")
@click.argument("input_filename", type=click.Path(exists=True))
@click.argument("output_filename", required=True, type=str, callback=_is_mp4)
def resolve_mp4(input_filename, output_filename):
    _run_command(
        f"""
        ffmpeg -i "{input_filename}" \
        -c:v libx264 -pix_fmt yuv420p -crf 16 \
        -force_key_frames 'expr:gte(t,n_forced/2)' -bf 2 \
        -vf yadif -use_editlist 0 \
        -movflags +faststart \
        -c:a aac -q:a 1 \
        -ac 2 -ar 48000 \
        -f mp4 "{output_filename}"
        """
    )


if __name__ == "__main__":
    cli()
